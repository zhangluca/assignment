{"ast":null,"code":"import { createStore } from 'redux';\n\nconst reducer = function (state = {\n  num: 0,\n  listData: [],\n  recomData: []\n}, action) {\n  let list = state.listData;\n  let recom = state.recomData;\n\n  switch (action.type) {\n    case 'updateList':\n      state.listData = action.data;\n      break;\n\n    case 'updateRecom':\n      state.recomData = action.data;\n      break;\n\n    case 'delList':\n      let index = list.findIndex(item => {\n        return item.id === action.id;\n      });\n      let delData = list.find(item => {\n        return item.id === action.id;\n      });\n      recom.push(delData);\n      list.splice(index, 1);\n      return Object.assign({}, state, {\n        listData: [...list],\n        recomData: [...recom]\n      });\n\n    case 'delRecom':\n      let i = recom.findIndex(item => {\n        return item.id === action.id;\n      });\n      let delrecData = recom.find(item => {\n        return item.id === action.id;\n      });\n      list.push(delrecData);\n      recom.splice(i, 1);\n      return Object.assign({}, state, {\n        listData: [...list],\n        recomData: [...recom]\n      });\n\n    default:\n      break;\n  }\n\n  return Object.assign({}, state);\n}; // create the store\n\n\nconst store = createStore(reducer);\nexport default store;","map":{"version":3,"sources":["C:/Users/ading/Desktop/netflix-mock/src/store/index.js"],"names":["createStore","reducer","state","num","listData","recomData","action","list","recom","type","data","index","findIndex","item","id","delData","find","push","splice","Object","assign","i","delrecData","store"],"mappings":"AACA,SAASA,WAAT,QAA2B,OAA3B;;AAEA,MAAMC,OAAO,GAAG,UAAWC,KAAK,GAAG;AAACC,EAAAA,GAAG,EAAE,CAAN;AAASC,EAAAA,QAAQ,EAAC,EAAlB;AAAsBC,EAAAA,SAAS,EAAC;AAAhC,CAAnB,EAAwDC,MAAxD,EAAgE;AAC9E,MAAIC,IAAI,GAAGL,KAAK,CAACE,QAAjB;AACA,MAAII,KAAK,GAAGN,KAAK,CAACG,SAAlB;;AACA,UAAOC,MAAM,CAACG,IAAd;AACI,SAAK,YAAL;AAAmBP,MAAAA,KAAK,CAACE,QAAN,GAAiBE,MAAM,CAACI,IAAxB;AAA6B;;AAChD,SAAK,aAAL;AAAoBR,MAAAA,KAAK,CAACG,SAAN,GAAkBC,MAAM,CAACI,IAAzB;AAA8B;;AAClD,SAAK,SAAL;AACI,UAAIC,KAAK,GAAGJ,IAAI,CAACK,SAAL,CAAeC,IAAI,IAAI;AAAE,eAAOA,IAAI,CAACC,EAAL,KAAYR,MAAM,CAACQ,EAA1B;AAA8B,OAAvD,CAAZ;AACA,UAAIC,OAAO,GAAGR,IAAI,CAACS,IAAL,CAAUH,IAAI,IAAI;AAAE,eAAOA,IAAI,CAACC,EAAL,KAAYR,MAAM,CAACQ,EAA1B;AAA8B,OAAlD,CAAd;AACAN,MAAAA,KAAK,CAACS,IAAN,CAAWF,OAAX;AACAR,MAAAA,IAAI,CAACW,MAAL,CAAYP,KAAZ,EAAkB,CAAlB;AACA,aAAOQ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAiBlB,KAAjB,EAAuB;AAACE,QAAAA,QAAQ,EAAC,CAAC,GAAGG,IAAJ,CAAV;AAAqBF,QAAAA,SAAS,EAAC,CAAC,GAAGG,KAAJ;AAA/B,OAAvB,CAAP;;AACH,SAAK,UAAL;AACG,UAAIa,CAAC,GAAGb,KAAK,CAACI,SAAN,CAAgBC,IAAI,IAAI;AAAE,eAAOA,IAAI,CAACC,EAAL,KAAYR,MAAM,CAACQ,EAA1B;AAA8B,OAAxD,CAAR;AACA,UAAIQ,UAAU,GAAGd,KAAK,CAACQ,IAAN,CAAWH,IAAI,IAAI;AAAE,eAAOA,IAAI,CAACC,EAAL,KAAYR,MAAM,CAACQ,EAA1B;AAA8B,OAAnD,CAAjB;AACAP,MAAAA,IAAI,CAACU,IAAL,CAAUK,UAAV;AACAd,MAAAA,KAAK,CAACU,MAAN,CAAaG,CAAb,EAAe,CAAf;AACA,aAAOF,MAAM,CAACC,MAAP,CAAc,EAAd,EAAiBlB,KAAjB,EAAuB;AAACE,QAAAA,QAAQ,EAAC,CAAC,GAAGG,IAAJ,CAAV;AAAqBF,QAAAA,SAAS,EAAC,CAAC,GAAGG,KAAJ;AAA/B,OAAvB,CAAP;;AAEJ;AAAS;AAhBb;;AAmBA,SAAOW,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBlB,KAAlB,CAAP;AACD,CAvBD,C,CAwBA;;;AACA,MAAMqB,KAAK,GAAGvB,WAAW,CAACC,OAAD,CAAzB;AAEA,eAAesB,KAAf","sourcesContent":["\r\nimport { createStore} from 'redux'\r\n\r\nconst reducer = function ( state = {num: 0, listData:[], recomData:[] },action) {\r\n  let list = state.listData\r\n  let recom = state.recomData\r\n  switch(action.type) {\r\n      case 'updateList': state.listData = action.data;break;\r\n      case 'updateRecom': state.recomData = action.data;break;\r\n      case 'delList': \r\n          let index = list.findIndex(item => { return item.id === action.id })\r\n          let delData = list.find(item => { return item.id === action.id })\r\n          recom.push(delData)\r\n          list.splice(index,1);\r\n          return Object.assign({},state,{listData:[...list], recomData:[...recom]})\r\n       case 'delRecom': \r\n          let i = recom.findIndex(item => { return item.id === action.id })\r\n          let delrecData = recom.find(item => { return item.id === action.id })\r\n          list.push(delrecData)\r\n          recom.splice(i,1);\r\n          return Object.assign({},state,{listData:[...list], recomData:[...recom]})\r\n      \r\n      default: break\r\n  }\r\n\r\n  return Object.assign({}, state);\r\n}\r\n// create the store\r\nconst store = createStore(reducer)\r\n\r\nexport default store\r\n"]},"metadata":{},"sourceType":"module"}